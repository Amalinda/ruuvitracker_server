(ns ruuvi-server.models.entities
  (:use korma.db)
  (:use korma.core)
  (:use ruuvi-server.standalone.config)
  )

(defn map-entities [database-spec]
  (defdb db (postgres database-spec))

  (defentity tracker
    (table :trackers)
    (pk :id)
    (entity-fields :id :tracker_identifier :name :latest_activity :shared_secret)
    )

  (defentity event-extension-type
    (table :event_extension_types)
    (pk :id)
    (entity-fields :name)
    )

  (defentity event-extension-value
    (table :event_extension_values)
    (pk :id)
    (entity-fields :id :value)
    (belongs-to event-extension-type {:fk :event_extension_type_id})
    )

  (defentity event-location
    (table :event_locations)
    (pk :id)
    (entity-fields :latitude :longitude)
    )
  
  (defentity event
    (table :events)
    (pk :id)
    (entity-fields :event_time :created_on)
    (belongs-to tracker {:fk :tracker_id})
    (has-one event-location {:fk :event_id})
    (has-many event-extension-value {:fk :event_id})
    )
)

(defn get-event [event_id]
  (first (select event (with tracker) (with event-location) (with event-extension-value) (where {:id event_id})))
  )

(defn get-tracker [tracker-identifier]
  (first (select tracker
                 (where {:tracker_identifier tracker-identifier}))))

(defn get-tracker! [tracker-identifier & tracker-name]
  (let [existing-tracker (get-tracker tracker-identifier)]
    (if existing-tracker
      existing-tracker
      (insert tracker (values {:tracker_identifier tracker-identifier
                              :name tracker-name}))
      )))

(defn get-extension-type-by-name [type-name]
  (first (select event-extension-type
                 (where {:name (str (name type-name))}))))

(defn get-extension-type-by-name! [type-name]
  (let [existing-extension-type (get-extension-type-by-name type-name)]
    (if existing-extension-type
      existing-extension-type
      (insert event-extension-type (values {:name (str (name type-name))
                                            :description "Autogenerated"}))
      )))

(defn create-event [data]
  (let [extension-keys (filter (fn [key]
                                 (.startsWith (name key) "X-"))
                               (keys data))
        tracker (get-tracker! (:tracker_identifier data))
        latitude (:latitude data)
        longitude (:longitude data)
        event-entity (insert event (values
                                    {:tracker_id (tracker :id)
                                     :event_time (:event_time data)
                                     }))]

    (if (and latitude longitude)
      (insert event-location (values
                              {:event_id (:id event-entity)
                               :latitude latitude
                               :longitude longitude
                               :accuracy (:accuracy data)
                               :satellite_count (:satellite_count data)
                               :altitude (:altitude data)}))
      )
    (doseq [key extension-keys]
      (insert event-extension-value
              (values
               {:event_id (:id event-entity)
                :value (data key)
                :event_extension_type_id (:id (get-extension-type-by-name! key))
                }
               )))
    event-entity
 ))

(defn -main []
  (map-entities *database-config*)
  (select tracker)
  (get-tracker! "roo2" name)
  )
